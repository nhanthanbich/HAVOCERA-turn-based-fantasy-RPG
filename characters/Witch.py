import math
import random as rd
from character_base import Character

class Witch(Character):
    def __init__(self, name, species, atk, stamina, hp, crit, dodge):
        super().__init__(name, species, atk, stamina, hp, crit, dodge)
        self.so_lan_thoi_khong = 0
        self.dark_ritual_used = False
        self.max_stamina = stamina
        self.turn_count = 0

    def attack(self, target):
        damage = self.atk
        is_crit = rd.random() < self.crit / 100
        if is_crit:
            damage = int(damage * 1.5)

        if getattr(self, "next_attack_buffed", False):
            damage = int(damage * 1.3)
            print("üí• Huy·∫øt ·∫•n nghi l·ªÖ c√≤n vang v·ªçng! ƒê√≤n ƒë√°nh n√†y ƒë∆∞·ª£c c∆∞·ªùng h√≥a th√™m 30% s·ª©c m·∫°nh!")
            self.next_attack_buffed = False

        print(f"{self.name} t·∫•n c√¥ng {target.name} v√† g√¢y {damage} s√°t th∆∞∆°ng!")
        target.take_damage(damage, self)

    def nguyen_rua(self, enemy):
        cost = 4
        if self.current_stamina < cost:
            print(f"{self.name} kh√¥ng ƒë·ªß nƒÉng l∆∞·ª£ng ƒë·ªÉ thi tri·ªÉn Nguy·ªÅn r·ªßa!")
            self.rest()
            return

        self.current_stamina -= cost
        old_atk = enemy.atk
        reduce = math.ceil(enemy.atk * (rd.randint(22, 28) / 100))
        enemy.atk = max(1, enemy.atk - reduce)
        self.crit = min(self.crit + 7, 50)

        print(f"üïØÔ∏è {self.name} nguy·ªÅn r·ªßa {enemy.name}, gi·∫£m {reduce} ATK ({old_atk} ‚Üí {enemy.atk})")
        print(f"üîÆ {self.name} tƒÉng 7% ch√≠ m·∫°ng (Crit: {self.crit}%)")

        if self.crit >= 45 and rd.random() < 0.5:
            lost = rd.randint(4, 6)
            enemy.current_stamina = max(0, enemy.current_stamina - lost)
            print(f"üí´ L·ªùi nguy·ªÅn h√∫t c·∫°n linh l·ª±c! {enemy.name} m·∫•t th√™m {lost} ‚ö°")

    def doc_duoc(self, enemy):
        cost = 12
        if self.current_stamina < cost:
            print(f"{self.name} kh√¥ng ƒë·ªß tinh l·ª±c ƒë·ªÉ s·ª≠ d·ª•ng ƒê·ªôc D∆∞·ª£c!")
            self.rest()
            return

        self.current_stamina -= cost
        base_damage = math.ceil(self.atk * 0.5)
        percent_damage = math.ceil(enemy.hp * (rd.randint(20, 28) / 100))
        damage = base_damage + percent_damage
        is_crit = rd.random() < self.crit / 100
        if is_crit:
            damage *= 2

        print(f"‚ò†Ô∏è {self.name} n√©m ƒë·ªôc d∆∞·ª£c ƒÉn m√≤n linh h·ªìn!")
        result = enemy.take_damage(damage, self)

        if result is not False:
            if is_crit:
                heal = math.ceil(damage * 0.2)
                self.hp = min(self.hp + heal, self.max_hp)
                print(f"üí• Ch√≠ m·∫°ng! {self.name} h·ªìi l·∫°i {heal} HP t·ª´ nƒÉng l∆∞·ª£ng ƒë·ªôc d∆∞·ª£c!")
            self.dodge = min(self.dodge + 5, 33)
            print(f"üå´Ô∏è N√© tr√°nh c·ªßa {self.name} tƒÉng l√™n {self.dodge}%!")
        else:
            print(f"üí® Nh∆∞ng {enemy.name} ƒë√£ n√© k·ªãp!")

    def thoi_khong(self, enemy=None):
        cost = 49
        if self.current_stamina < cost:
            print(f"{self.name} kh√¥ng ƒë·ªß s·ª©c m·∫°nh ƒë·ªÉ b·∫ª cong th·ªùi gian...")
            self.rest()
            return

        self.current_stamina -= cost
        chance = 0.9 - self.so_lan_thoi_khong * 0.22
        if rd.random() < chance:
            self.so_lan_thoi_khong += 1
            self.hp = self.max_hp
            self.atk = max(1, math.ceil(self.atk * 0.55))
            self.dodge = min(self.dodge + 10, 33)
            print(f"‚è≥ {self.name} ƒë·∫£o ng∆∞·ª£c s·ªë ph·∫≠n! H·ªìi ƒë·∫ßy HP, ATK gi·∫£m c√≤n {self.atk}, n√© tr√°nh tƒÉng {self.dodge}%!")
        else:
            penalty = rd.randint(5, 10)
            self.hp = max(1, self.hp - penalty)
            print(f"üåÄ Th·∫•t b·∫°i! {self.name} b·ªã t·ªïn th∆∞∆°ng b·ªüi ngh·ªãch l√Ω th·ªùi gian ({penalty} HP m·∫•t). HP c√≤n {self.hp}/{self.max_hp}")

    def nghi_le_hac_am(self):
        if self.dark_ritual_used:
            print(f"{self.name} ƒë√£ hi·∫øn t·∫ø linh h·ªìn m·ªôt l·∫ßn ‚Äì kh√¥ng th·ªÉ t√°i di·ªÖn nghi l·ªÖ h·∫Øc √°m n·ªØa...")
            return False

        if self.hp > 250:
            choice = input(f"‚ùó {self.name} c√≤n {self.hp} HP (>250). B·∫°n c√≥ mu·ªën t·ª± gi·∫£m xu·ªëng 250 HP ƒë·ªÉ d√πng nghi l·ªÖ? (y/n): ").strip().lower()
            if choice != "y":
                print("‚ùå B·∫°n t·ª´ ch·ªëi th·ª±c hi·ªán nghi l·ªÖ.")
                return False
            self.hp = 250

        if self.current_stamina < 10:
            print(f"{self.name} qu√° ki·ªát s·ª©c ƒë·ªÉ th·ª±c hi·ªán nghi l·ªÖ!")
            self.rest()
            return True

        self.dark_ritual_used = True
        self.current_stamina = 0
        self.max_stamina = 0
        hp_sacrifice = rd.randint(1, 10)
        self.hp = max(1, self.hp - hp_sacrifice)
        bonus_hp = rd.randint(10, 20)
        self.hp = min(self.hp + math.ceil(self.max_hp * bonus_hp / 100), self.max_hp)

        boost = rd.randint(8 + 6 * self.so_lan_thoi_khong, 12 + 10 * self.so_lan_thoi_khong)
        self.atk += boost * 3
        self.crit = min(self.crit + 10, 50)
        self.next_attack_buffed = True

        print(f"ü©∏ {self.name} th·ª±c hi·ªán nghi l·ªÖ h·∫Øc √°m, nh·∫≠n +{boost * 3} ATK, +10% Crit, HP tƒÉng nh·∫π.")
        return True

    def start_turn(self):
        self.turn_count += 1
        if self.turn_count <= 5:
            self.max_hp += 56
            self.hp = min(self.hp + 56, self.max_hp)

            self.max_stamina += 7
            self.current_stamina = min(self.current_stamina + 7, self.max_stamina)

            self.atk += 8
            self.crit = min(self.crit + 1, 50)
            self.dodge = min(self.dodge + 1, 33)

            print(f"üåì {self.name} h·∫•p th·ª• h·∫Øc kh√≠ ‚Äì +56 HP, +7 ‚ö°, +8 ATK, +1% Crit, +1% Dodge")

    def choose_skill(self, enemy, auto=False):
        self.start_turn()
        print(f"\n{self.name} (Ph√π th·ªßy h·∫Øc √°m) ch·ªçn k·ªπ nƒÉng:")
        print("1. üëä ƒê√°nh th∆∞·ªùng")
        print("2. üïØÔ∏è Nguy·ªÅn r·ªßa (4 ‚ö°)")
        print("3. ‚ò†Ô∏è ƒê·ªôc D∆∞·ª£c (12 ‚ö°)")
        if self.so_lan_thoi_khong < 3:
            print("4. ‚è≥ Th·ªùi Kh√¥ng (49 ‚ö°)")
        if not self.dark_ritual_used:
            print("5. ü©∏ Nghi l·ªÖ h·∫Øc √°m")
        print("0. ‚öë ƒê·∫ßu h√†ng")

        choice = input("‚û§ Ch·ªçn k·ªπ nƒÉng: ").strip()
        if choice == "1":
            self.attack(enemy)
        elif choice == "2":
            self.nguyen_rua(enemy)
        elif choice == "3":
            self.doc_duoc(enemy)
        elif choice == "4" and self.so_lan_thoi_khong < 3:
            self.thoi_khong(enemy)
        elif choice == "5" and not self.dark_ritual_used:
            pre_hp = self.hp
            self.nghi_le_hac_am()
            if self.hp == pre_hp:
                self.choose_skill(enemy)
        elif choice == "0":
            self.hp = 0
            print(f"{self.name} ƒë√£ ƒë·∫ßu h√†ng.")
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. T·ª± ƒë·ªông ƒë√°nh th∆∞·ªùng.")
            self.attack(enemy)
