class Witch(Character):
    def __init__(self, name, species, atk, stamina, hp, crit, dodge):
        super().__init__(name, species, atk, stamina, hp, crit, dodge)
        self.so_lan_thoi_khong = 0
        self.dark_ritual_used = False
        self.max_stamina = stamina
        self.turn_count = 0

    def attack(self, target):
        damage = self.atk
        is_crit = rd.random() < self.crit / 100
        if is_crit:
            damage = int(damage * 1.5)

        if getattr(self, "next_attack_buffed", False):
            damage = int(damage * 1.3)
            print("üí• Huy·∫øt ·∫•n nghi l·ªÖ c√≤n vang v·ªçng! ƒê√≤n ƒë√°nh n√†y ƒë∆∞·ª£c c∆∞·ªùng h√≥a th√™m 30% s·ª©c m·∫°nh!")
            self.next_attack_buffed = False

        print(f"{self.name} t·∫•n c√¥ng {target.name} v√† g√¢y {damage} s√°t th∆∞∆°ng!")
        target.take_damage(damage, self)

    def nguyen_rua(self, enemy):
        cost = 4
        if self.current_stamina < cost:
            print(f"{self.name} kh√¥ng ƒë·ªß nƒÉng l∆∞·ª£ng ƒë·ªÉ thi tri·ªÉn Nguy·ªÅn r·ªßa!")
            self.rest()
            return

        self.current_stamina -= cost

        old_atk = enemy.atk
        reduce = math.ceil(enemy.atk * (rd.randint(22, 28) / 100))
        enemy.atk = max(1, enemy.atk - reduce)

        self.crit = min(self.crit + 7, 50)  # üëà Gi·ªõi h·∫°n crit
        print(f"üïØÔ∏è {self.name} nguy·ªÅn r·ªßa {enemy.name}, gi·∫£m {reduce} ATK ({old_atk} ‚Üí {enemy.atk})")
        print(f"üîÆ {self.name} tƒÉng 7% ch√≠ m·∫°ng (Crit: {self.crit}%)")

        if self.crit >= 45 and rd.random() < 0.5:
            lost = rd.randint(4, 6)
            enemy.current_stamina = max(0, enemy.current_stamina - lost)
            print(f"üí´ L·ªùi nguy·ªÅn h√∫t c·∫°n linh l·ª±c! {enemy.name} m·∫•t th√™m {lost} ‚ö°")

    def doc_duoc(self, enemy):
        cost = 12
        if self.current_stamina < cost:
            print(f"{self.name} kh√¥ng ƒë·ªß tinh l·ª±c ƒë·ªÉ s·ª≠ d·ª•ng ƒê·ªôc D∆∞·ª£c!")
            self.rest()
            return

        self.current_stamina -= cost
        base_damage = math.ceil(self.atk * 0.5)
        percent_damage = math.ceil(enemy.hp * (rd.randint(20, 28) / 100))
        damage = base_damage + percent_damage

        is_crit = rd.random() < self.crit / 100
        if is_crit:
            damage *= 2

        print(f"‚ò†Ô∏è {self.name} n√©m ƒë·ªôc d∆∞·ª£c ƒÉn m√≤n linh h·ªìn!")
        result = enemy.take_damage(damage, self)

        if result is not False:
            if is_crit:
                heal = math.ceil(damage * 0.2)
                self.hp = min(self.hp + heal, self.max_hp)
                print(f"üí• Ch√≠ m·∫°ng! {self.name} h·ªìi l·∫°i {heal} HP t·ª´ nƒÉng l∆∞·ª£ng ƒë·ªôc d∆∞·ª£c!")
            self.dodge = min(self.dodge + 5, 33)  # üëà Gi·ªõi h·∫°n dodge
            print(f"üå´Ô∏è N√© tr√°nh c·ªßa {self.name} tƒÉng l√™n {self.dodge}%!")
        else:
            print(f"üí® Nh∆∞ng {enemy.name} ƒë√£ n√© k·ªãp!")

    def thoi_khong(self, enemy=None):
        cost = 49
        if self.current_stamina < cost:
            print(f"{self.name} kh√¥ng ƒë·ªß s·ª©c m·∫°nh ƒë·ªÉ b·∫ª cong th·ªùi gian...")
            self.rest()
            return

        self.current_stamina -= cost
        chance = 0.9 - self.so_lan_thoi_khong * 0.22

        if rd.random() < chance:
            self.so_lan_thoi_khong += 1
            self.hp = self.max_hp
            old_atk = self.atk
            self.atk = max(1, math.ceil(self.atk * 0.55))
            self.dodge = min(self.dodge + 10, 33)  # üëà Gi·ªõi h·∫°n dodge
            print(f"‚è≥ {self.name} ƒë·∫£o ng∆∞·ª£c s·ªë ph·∫≠n! H·ªìi ƒë·∫ßy HP, ATK gi·∫£m c√≤n {self.atk}, n√© tr√°nh tƒÉng {self.dodge}%!")
        else:
            penalty = rd.randint(5, 10)
            self.hp = max(1, self.hp - penalty)
            print(f"üåÄ Th·∫•t b·∫°i! {self.name} b·ªã t·ªïn th∆∞∆°ng b·ªüi ngh·ªãch l√Ω th·ªùi gian ({penalty} HP m·∫•t). HP c√≤n {self.hp}/{self.max_hp}")

    def nghi_le_hac_am(self):
        if self.dark_ritual_used:
            print(f"{self.name} ƒë√£ hi·∫øn t·∫ø linh h·ªìn m·ªôt l·∫ßn ‚Äì kh√¥ng th·ªÉ t√°i di·ªÖn nghi l·ªÖ h·∫Øc √°m n·ªØa...")
            return False

        if self.hp > 250:
            if hasattr(self, "is_bot") and self.is_bot:
                print(f"{self.name} c√≤n qu√° sung s·ª©c ƒë·ªÉ l√†m nghi l·ªÖ ‚Äì ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán HP.")
                return False
            else:
                choice = input(f"‚ùó {self.name} c√≤n {self.hp} HP (>250). B·∫°n c√≥ mu·ªën t·ª± gi·∫£m xu·ªëng 250 HP ƒë·ªÉ d√πng nghi l·ªÖ? (y/n): ").strip().lower()
                if choice != "y":
                    print("‚ùå B·∫°n t·ª´ ch·ªëi th·ª±c hi·ªán nghi l·ªÖ.")
                    return False
                self.hp = 250

        if self.current_stamina < 10:
            print(f"{self.name} qu√° ki·ªát s·ª©c ƒë·ªÉ th·ª±c hi·ªán nghi l·ªÖ!")
            self.rest()
            return True

        self.dark_ritual_used = True
        self.current_stamina = 0
        self.max_stamina = 0
        hp_sacrifice = math.ceil(rd.randint(1,10))
        self.hp = max(1, self.hp - hp_sacrifice)
        bonus_hp = rd.randint(10, 20)
        hp_recovery = math.ceil(self.max_hp * bonus_hp / 100)
        self.hp = min(self.hp + hp_recovery, self.max_hp)
        giam_yeu = self.so_lan_thoi_khong
        boost_min = 8 + 6 * giam_yeu
        boost_max = 12 + 10 * giam_yeu
        boost = rd.randint(boost_min, boost_max)

        self.atk += (boost * 3)
        self.crit = min(self.crit + 10, 50)  # üëà Gi·ªõi h·∫°n crit
        self.next_attack_buffed = True

        print(f"ü©∏ {self.name} r·∫°ch tay nh·ªè m√°u th·ª±c hi·ªán nghi th·ª©c, hi·∫øn t·∫ø to√†n b·ªô ma l·ª±c ƒë·ªÉ nh·∫≠n l·∫•y s·ª©c m·∫°nh v·∫≠t l√Ω thu·∫ßn khi·∫øt...")
        print(f"üíÄ ƒê√°nh ƒë·ªïi v√†i gi·ªçt tinh huy·∫øt ({hp_sacrifice} HP) v√† kh·∫£ nƒÉng d√πng ph√©p vƒ©nh vi·ªÖn!")
        print(f"‚ú® TƒÉng m·∫°nh {hp_recovery} sinh l·ª±c nh∆∞ m·ªôt ph·∫ßn th∆∞·ªüng nghi l·ªÖ.")
        print(f"üî• Nh·∫≠n +{boost * 3} ATK, +10% Crit.")
        print(f"HP: {self.hp}/{self.max_hp}, ATK: {self.atk}, Crit: {self.crit}%, Stamina: {self.current_stamina}/{self.max_stamina}")
        return True

    def start_turn(self):
        self.turn_count += 1
        if self.turn_count <= 5:
            old_max_hp = self.max_hp
            old_hp = self.hp
            old_stamina = self.current_stamina
            old_max_stamina = self.max_stamina

            self.max_hp += 56
            self.hp = min(self.hp + 56, self.max_hp)

            self.max_stamina += 7
            self.current_stamina = min(self.current_stamina + 7, self.max_stamina)

            self.atk += 8
            self.crit = min(self.crit + 1, 50)   # üëà Gi·ªõi h·∫°n crit
            self.dodge = min(self.dodge + 1, 33) # üëà Gi·ªõi h·∫°n dodge

            print(f"üåì {self.name} h·∫•p th·ª• h·∫Øc kh√≠ trong kh√¥ng gian:")
            print(f"‚ù§Ô∏è HP: {old_hp}/{old_max_hp} ‚Üí {self.hp}/{self.max_hp}")
            print(f"‚ö° Stamina: {old_stamina}/{old_max_stamina} ‚Üí {self.current_stamina}/{self.max_stamina}")
            print(f"üî∫ +8 ATK (T·ªïng: {self.atk}), +1% Crit ({self.crit}%), +1% Dodge ({self.dodge}%)")

    def choose_skill(self, enemy, auto=False):
        self.start_turn()
        if self.max_stamina == 0:
            if auto:
                print(f"\nü§ñ {self.name} kh√¥ng c√≤n ph√©p ‚Äì AI d√πng ƒë√°nh th∆∞·ªùng.")
            else:
                print(f"\n{self.name} kh√¥ng c√≤n ph√©p thu·∫≠t sau nghi l·ªÖ ‚Äì ch·ªâ c√≥ th·ªÉ ƒë√°nh th∆∞·ªùng!")
            self.attack(enemy)
            return

        if auto:
            print(f"\nü§ñ {self.name} (AI ‚Äì Witch) ƒëang ch·ªçn k·ªπ nƒÉng...")

            # üîÆ Ph√°n ƒëo√°n n·∫øu l∆∞·ª£t t·ªõi c√≥ nguy c∆° HP xu·ªëng <250 m√† ch∆∞a ƒë·ªß stamina ƒë·ªÉ d√πng th·ªùi kh√¥ng
            potential_danger = enemy.atk * 1.5
            if (
                self.hp > 250 and
                (self.hp - potential_danger) <= 250 and
                self.current_stamina < 49 and
                self.so_lan_thoi_khong < 3
            ):
                print(f"‚ö†Ô∏è {self.name} d·ª± ƒëo√°n nguy hi·ªÉm c·∫≠n k·ªÅ ‚Äì ngh·ªâ ƒë·ªÉ h·ªìi stamina chu·∫©n b·ªã d√πng Th·ªùi Kh√¥ng!")
                self.rest()
                return

            # 1. HP < 250 v√† c√≤n l∆∞·ª£t d√πng Th·ªùi Kh√¥ng
            if self.hp <= 250 and self.current_stamina >= 49 and self.so_lan_thoi_khong < 3:
                self.thoi_khong(enemy)
                return

            # 2. K·∫øt li·ªÖu n·∫øu k·∫ª ƒë·ªãch s·∫Øp ch·∫øt
            if enemy.hp <= 200:
                self.attack(enemy)
                return

            # 3. N·∫øu ƒë√£ d√πng th·ªùi kh√¥ng 3 l·∫ßn ‚Üí nghi l·ªÖ h·∫Øc √°m
            if not self.dark_ritual_used and self.hp <= 250 and self.so_lan_thoi_khong >= 3:
                self.nghi_le_hac_am()
                return

            # 4. ∆Øu ti√™n nguy·ªÅn r·ªßa n·∫øu ch∆∞a t·ª´ng d√πng th·ªùi kh√¥ng
            if self.so_lan_thoi_khong == 0 and self.current_stamina >= 4:
                self.nguyen_rua(enemy)
                return

            # 5. N·∫øu ƒë√£ d√πng th·ªùi kh√¥ng ‚Üí ∆∞u ti√™n ƒë·ªôc d∆∞·ª£c n·∫øu ƒë·ªß
            if self.so_lan_thoi_khong >= 1 and self.current_stamina >= 12:
                self.doc_duoc(enemy)
                return

            # 6. N·∫øu c√≥ th·ªÉ d√πng th·ªùi kh√¥ng ti·∫øp v√† HP h∆°i th·∫•p
            if self.so_lan_thoi_khong < 3 and self.current_stamina >= 49 and self.hp < self.max_hp * 0.4:
                self.thoi_khong(enemy)
                return

            # 7. Kh√¥ng c√≤n ph√©p ho·∫∑c logic n√†o ph√π h·ª£p ‚Äì ƒë√°nh th∆∞·ªùng
            self.attack(enemy)
            return

        # Ng∆∞·ªùi ch∆°i t·ª± ch·ªçn
        print(f"\n{self.name} (Ph√π th·ªßy h·∫Øc √°m) ch·ªçn k·ªπ nƒÉng:")
        print("üëä 1. ƒê√°nh th∆∞·ªùng")

        if self.max_stamina > 0:
            print("2. üïØÔ∏è Nguy·ªÅn r·ªßa (gi·∫£m 17~25% ATK ƒë·ªãch, tƒÉng 5% Crit) (4 stamina)")
            print("3. ‚ò†Ô∏è ƒê·ªôc d∆∞·ª£c (s√°t th∆∞∆°ng cao theo % HP ƒë·ªëi th·ªß + ch√≠ m·∫°ng, tƒÉng dodge) (12 stamina)")

            if self.so_lan_thoi_khong < 3:
                print("4. ‚è≥ Ph√©p th·ªùi kh√¥ng (h·ªìi full HP, gi·∫£m ATK, r·ªßi ro cao) (49 stamina)")

            if not self.dark_ritual_used:
                print("5. ü©∏ Nghi l·ªÖ h·∫Øc √°m (T·ª´ b·ªè ph√©p thu·∫≠t ƒë·ªÉ +ATK +Crit +HP)")

        print("0. ‚öë ƒê·∫ßu h√†ng")

        choice = input("‚û§ Ch·ªçn k·ªπ nƒÉng: ").strip()

        if choice == '0':
            self.hp = 0
            print(f"{self.name} ƒë√£ ƒë·∫ßu h√†ng!")
        elif choice == "1":
            self.attack(enemy)
        elif choice == "2" and self.max_stamina > 0:
            self.nguyen_rua(enemy)
        elif choice == "3" and self.max_stamina > 0:
            self.doc_duoc(enemy)
        elif choice == "4" and self.max_stamina > 0:
            if self.so_lan_thoi_khong < 3:
                self.thoi_khong(enemy)
            else:
                print("‚ùå Ph√©p th·ªùi kh√¥ng ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ª≠ d·ª•ng!")
                self.attack(enemy)
        elif choice == "5" and self.max_stamina > 0:
            if not getattr(self, 'dark_ritual_used', False):
                pre_hp = self.hp
                self.nghi_le_hac_am()
                if self.hp == pre_hp:  # N·∫øu kh√¥ng thay ƒë·ªïi t·ª©c l√† nghi l·ªÖ b·ªã t·ª´ ch·ªëi ho·∫∑c th·∫•t b·∫°i
                    self.choose_skill(enemy)  # G·ªçi l·∫°i ƒë·ªÉ ch·ªçn skill kh√°c
            else:
                print("‚ùå Nghi l·ªÖ h·∫Øc √°m ch·ªâ ƒë∆∞·ª£c d√πng m·ªôt l·∫ßn!")
                self.attack(enemy)
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. T·ª± ƒë·ªông d√πng t·∫•n c√¥ng c∆° b·∫£n.")
            self.attack(enemy)
